<body>
  <!-- Sidenav -->
  <% include ../partials/sidebar %>
  <!-- Main content -->
  <div class="main-content">
    <!-- Top navbar -->
    <% include ../partials/navbar %>
    <!-- Header -->
    <div class="header bg-gradient-primary pb-8 pt-5 pt-md-8">
      <div class="container-fluid">
        <div class="header-body">
        </div>
      </div>
    </div>
    <!-- Page content -->
    <div class="container-fluid mt--8">
      <div class="row">
        <div class="col">
          <div class="card-wrapper">
            <!-- Custom form validation -->
            <div class="card">
              <!-- Card header -->
              <div class="card-header">
                <h3 class="mb-0">Mise à jour de la tâche</h3>
              </div>
              <!-- Card body -->
              <div class="card-body">
                <form class="needs-validation" novalidate="" id="updateTodo">
                  <div class="form-row">
                    <div class="col-md-6 mb-3">
                      <div class="form-group">
                        <label class="form-control-label" for="title">Titre</label>
                        <input type="text" class="form-control" name="title" id="title" placeholder="Titre" required="">
                      </div>
                    </div>
                  </div>
                  <div class="row input-daterange datepicker align-items-center">
                    <div class="col-md-6 mb-3">
                      <div class="form-group">
                        <label class="form-control-label" for="dateBegin">Date de début</label>
                        <input class="form-control" name="dateBegin" id="dateBegin" placeholder="Date de début"
                          type="text" required="">
                      </div>
                    </div>
                    <div class="col-md-6 mb-3">
                      <div class="form-group">
                        <label class="form-control-label" for="dateEnd">Date de fin</label>
                        <input class="form-control" name="dateEnd" id="dateEnd" placeholder="Date de fin" type="text"
                          required="">
                      </div>
                    </div>
                  </div>
                  <div class="form-row">
                    <div class="col-md-6 mb-3">
                      <div class="form-group">
                        <label class="form-control-label" for="statut">Statut</label>
                        <select class="form-control" name="statut" id="statut" required="">
                          <option>Non précisé</option>
                          <option>Une tâche est requise</option>
                          <option>En cours</option>
                          <option>Achevé</option>
                          <option>Annulé</option>
                        </select>
                      </div>
                    </div>
                    <div class="col-md-6 mb-3">
                      <div class="form-group">
                        <label class="form-control-label" for="tags">Tags</label>
                        <select class="form-control" id="selectTags" name="tags" required="" multiple="">
                        </select>
                      </div>
                    </div>
                  </div>
                  <button class="btn btn-primary" type="button" id="submitButton">Modifier</button>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- Footer -->
      <% include ../partials/footer %>
    </div>
  </div>
  <!-- Include scripts -->
  <% include ../partials/scripts %>
  <script>
    const apiURL = 'http://localhost:5000/api/v1';

    const httpMethod = Object.freeze({
      GET: 'GET',
      POST: 'POST',
      PUT: 'PUT',
      DELETE: 'DELETE',
    });

    // HTTP method asynchronous
    function httpAsync(url, method, callback) {
      const xmlHttp = new XMLHttpRequest();
      // eslint-disable-next-line func-names
      xmlHttp.onreadystatechange = function () {
        if (xmlHttp.readyState === 4 && xmlHttp.status === 200) callback(xmlHttp.responseText);
      };
      xmlHttp.open(method, url, true); // true for asynchronous
      xmlHttp.send(null);
    }

    function setDataToForm(todo) {
      $('#title').val(todo.title);
      $('#dateBegin').val(todo.dateBegin);
      $('#dateEnd').val(todo.dateEnd);
      $('#statut').val(todo.statut);
      $.each(todo.tags.toString().split(","), function (key, value) {
        let tagValue = value.charAt(0).toUpperCase() + value.slice(1);
        $("#selectTags option[value='" + tagValue + "']").prop("selected", true);
      });
    }

    // GET tags
    httpAsync(apiURL + '/tags', httpMethod.GET, function (callback) {
      let response = JSON.parse(callback);
      if (response.success === 'true') {
        response.tags.forEach(tag => {
          selectTags.append(new Option(tag.title, tag.title));
        });
      } else {
        alert(response.message);
      }
    });

    // Get todo id
    let url = new URL(window.location.href);
    const id = Object.freeze(url.searchParams.get("id"));

    // GET todo
    httpAsync(apiURL + '/todos/' + id, httpMethod.GET, function (callback) {
      let response = JSON.parse(callback);
      if (response.success === 'true') {
        setDataToForm(response.todo);
      } else {
        alert(response.message);
      }
    });

    // Update todo
    $('#submitButton').click(function () {
      $.ajax({
        url: apiURL + '/todos/' + id,
        type: 'PUT',
        dataType: 'json',
        data: $('form#updateTodo').serialize(),
        success: function (data) {
          console.log(data.message);
          window.location.replace("/");
        },
        error: function (data) {
          alert(data.responseJSON.message);
        }
      });
    });
  </script>
</body>